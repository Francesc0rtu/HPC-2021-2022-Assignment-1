df <- data.frame(read.csv(file)[1:24,])
df$X <- NULL
df<-df
x <- df$X.bytes
model_linear<-lm(t.usec. ~ X.bytes, df)
model_poly <- loess(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
plot_nshm <- function(core, socket, node) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times
ggsave(paste0('plot1.png'), width=15, height=8, dpi=150)
# core_bandwidth <- plot_bandwidth(core)
# socket_bandwidth <- plot_bandwidth(socket)
# node_badnwidth <- plot_bandwidth(node)
#core_bandwidth + socket_bandwidth + node_badnwidth
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df$X <- NULL
df<-df
x <- df$X.bytes
model_linear<-lm(t.usec. ~ X.bytes, df)
model_poly <- loess(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
plot_nshm <- function(core, socket, node) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times
ggsave(paste0('plot1.png'), width=15, height=8, dpi=150)
# core_bandwidth <- plot_bandwidth(core)
# socket_bandwidth <- plot_bandwidth(socket)
# node_badnwidth <- plot_bandwidth(node)
#core_bandwidth + socket_bandwidth + node_badnwidth
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file)[1:24,])
df$X <- NULL
df<-df
x <- df$X.bytes
model_linear<-lm(t.usec. ~ X.bytes, df)
model_poly <- loess(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
df <- data.frame(read.csv(file))[1:24,]
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))[1:24,]
df$X <- NULL
df<-df
x <- df$X.bytes
model_linear<-lm(t.usec. ~ X.bytes, df)
model_poly <- loess(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
plot_nshm <- function(core, socket, node) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times
#ggsave(paste0('plot1.png'), width=15, height=8, dpi=150)
# core_bandwidth <- plot_bandwidth(core)
# socket_bandwidth <- plot_bandwidth(socket)
# node_badnwidth <- plot_bandwidth(node)
#core_bandwidth + socket_bandwidth + node_badnwidth
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))[1:22,]
df$X <- NULL
df<-df
x <- df$X.bytes
model_linear<-lm(t.usec. ~ X.bytes, df)
model_poly <- loess(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
plot_nshm <- function(core, socket, node) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times
#ggsave(paste0('plot1.png'), width=15, height=8, dpi=150)
# core_bandwidth <- plot_bandwidth(core)
# socket_bandwidth <- plot_bandwidth(socket)
# node_badnwidth <- plot_bandwidth(node)
#core_bandwidth + socket_bandwidth + node_badnwidth
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))[1:23,]
df$X <- NULL
df<-df
x <- df$X.bytes
model_linear<-lm(t.usec. ~ X.bytes, df)
model_poly <- loess(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
plot_bandwidth <- function(file) {
df <- data.frame(read.csv(file)[1:24,])
df$X <- NULL
df<-df[1:22,]
x <- df$X.bytes
model_linear<-lm(Mbytes.sec[1:22] ~ X.bytes[1:22], df)
model_poly <- loess(Mbytes.sec[1:22] ~ X.bytes[1:22], df, degree = 1)
#bandwidth
bandwidth <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="empirical")) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="empirical"))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
labs(x = "Message size (bytes)", y = "MB/s") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297503")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"Mbytes.sec.comp." %in% colnames(df)){
df$Mbytes.sec.comp. <- round(loess(Mbytes.sec ~ X.bytes, df)$fitted, 4)
fwrite.csv(df, file)
}
return(bandwidth)
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))[1:25,]
df$X <- NULL
df<-df
x <- df$X.bytes
model_linear<-lm(t.usec. ~ X.bytes, df)
model_poly <- loess(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))[1:20,]
df$X <- NULL
df<-df
x <- df$X.bytes
model_linear<-lm(t.usec. ~ X.bytes, df)
model_poly <- loess(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df$X <- NULL
df<-df[1:24,]
x <- df$X.bytes
#model_linear<-lm(t.usec.[1:24,] ~ X.bytes[1:24,], df)
model_poly <- loess(t.usec.[1:24,] ~ X.bytes[1:24,], df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df$X <- NULL
df<-df[1:24,]
x <- df$X.bytes
#model_linear<-lm(t.usec.[1:24,] ~ X.bytes[1:24,], df)
model_poly <- loess(t.usec.[1:24] ~ X.bytes[1:24], df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df$X <- NULL
df<-df[1:24,]
x <- df$X.bytes
#model_linear<-lm(t.usec.[1:24,] ~ X.bytes[1:24,], df)
model_poly <- loess(t.usec.[1:20] ~ X.bytes[1:20], df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
#df$X <- NULL
df<-df[1:24,]
x <- df$X.bytes
#model_linear<-lm(t.usec.[1:24,] ~ X.bytes[1:24,], df)
model_poly <- loess(t.usec.[1:24] ~ X.bytes[1:24], df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="sperimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit poly model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit poly model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
if(!"t.usec.comp." %in% colnames(df)){
df$t.usec.comp. <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
write.csv(df, file)
}
return(times)
}
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
#openmpi - cpu
##############
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv")
