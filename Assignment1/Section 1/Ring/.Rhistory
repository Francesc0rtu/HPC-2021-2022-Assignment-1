}
train.indexes = sample(nrow(d))[1:(nrow(d)*0.8)]
errors(d[train.indexes,], d[-train.indexes,])
seq(0.5,0.9,0.05) %>% map_dfr(function(r) {
train.indexes = sample(nrow(d))[1:(nrow(d)*0.8)]
c(r=r,errors(d[train.indexes,], d[-train.indexes,]))
})
rep(seq(0.1,0.9,0.1),10) %>% map_dfr(function(r) {train.indexes = sample(nrow(d))[1:(nrow(d)*r)];c(r=r,errors(d[train.indexes,], d[-train.indexes,]))}) %>% group_by(r) %>% summarise_all(mean) %>% pivot_longer(cols=c("oob","test")) %>% ggplot(aes(x=r, y=value, color=name)) + geom_line()
rep(seq(0.1,0.9,0.1),10) %>% map_dfr(function(r) {train.indexes = sample(nrow(d))[1:(nrow(d)*r)];c(r=r,errors(d[train.indexes,], d[-train.indexes,]))}) %>% group_by(r) %>% summarise_all(mean) %>% pivot_longer(cols=c("oob","test")) %>% ggplot(aes(x=r, y=value, color=name)) + geom_line() + ylim(0,0.5)
m = randomForest(Species~., d, importance=T)
m$importance
m = randomForest(Species~., d)
m$importance
help("f_lhs")
help("as.character")
help("table")
cv.error = function(formula, learner, data, k, ...) {
indexes = sample(nrow(data))
errs = c(1:k) %>% map_dbl(function(i) {
indexes.test = indexes[c((nrow(data)/k*(i-1)+1):(nrow(data)/k*i))]
m = learner(formula, data[-indexes.test,], ...)
predicted.y = predict(m, data[indexes.test,], type = "class")
actual.y = data[indexes.test, as.character(f_lhs(formula))]
confusion.matrix = table(actual.y, predicted.y)
1-sum(diag(confusion.matrix))/sum(confusion.matrix)
})
names(errs) = paste0("fold", c(1:k))
errs
}
print(cv.error(Species~., randomForest, d, 3))
library(dbplyr)
print(cv.error(Species~., randomForest, d, 3))
library(purrr)
print(cv.error(Species~., randomForest, d, 3))
library(randomForest)
print(cv.error(Species~., randomForest, d, 3))
help("f_lhs")
library(rlang)
print(cv.error(Species~., randomForest, d, 3))
print(cv.error(Species~., randomForest, d, 5))
k=5
formula= Species ~ .
indexes.test = indexes[c((nrow(d)/k*(i-1)+1):(nrow(d)/k*i))]
indexes=c(1:100)
formula= Species ~ .
indexes.test = indexes[c((nrow(d)/k*(i-1)+1):(nrow(d)/k*i))]
m = learner(formula, data[-indexes.test,], ...)
learner=randomForest()
learner=randomForest
formula= Species ~ .
indexes.test = indexes[c((nrow(d)/k*(i-1)+1):(nrow(d)/k*i))]
m = learner(formula, data[-indexes.test,], ...)
learner=randomForest()
k=5
indexes=c(1:100)
formula= Species ~ .
indexes.test = indexes[c((nrow(d)/k*(i-1)+1):(nrow(d)/k*i))]
m = randomForest(formula, data[-indexes.test,], ...)
m = randomForest(formula, data[-indexes.test,])
k=5
indexes=c(1:100)
formula= Species ~ .
indexes.test = indexes[c((nrow(d)/k*(i-1)+1):(nrow(d)/k*i))]
m = randomForest(formula, d[-indexes.test,])
predicted.y = predict(m, d[indexes.test,], type = "class")
actual.y = d[indexes.test, as.character(f_lhs(formula))]
confusion.matrix = table(actual.y, predicted.y)
1-sum(diag(confusion.matrix))/sum(confusion.matrix)
confusion.matrix
pairs(d[,1:4], col=d$Species)
fake.uni.d = expand_grid(Sepal.Length=seq(5,8,length.out = 20), Petal.Length=seq(3,7, length.out = 20))
summary(fake.uni.d)
fake.uni.d = expand_grid(Sepal.Length=seq(5,8,length.out = 20), Petal.Length=seq(3,7, length.out = 20))
help("expand_grid")
install.packages("dvmisc")
install.packages("dvmisc")
B=1000
B=1000
for i in c(0:B): {
v[i]=rskellam(0,1,1)
}
library(skellam)
help("rskellam")
v[i]=rskellam(0,1,1)
v[i]<-rskellam(0,1,1)
for i in c(0:B){
v[i]<-rskellam(0,1,1)
}
for(i in 1:B){
v[i]<-rskellam(0,1,1)
}
v<-rep(0,b)
v<-rep(0,B)
for(i in 1:B){
v[i]<-rskellam(0,1,1)
}
for(i in 1:B){
v[i]<-rskellam(1,1,1)
}
plot(v)
plot(0:B, v)
plot(1:B, v)
v<-rep(1,B)
for(i in 1:B){
v[i]<-rskellam(1,1,1)
}
plot(1:B, v)
v[i]<-rskellam(1,1,1)
plot(v, type="n")
plot(v, type="n")
hist.scott(v)
help("hist.scott")
library(MASS, lib.loc = "/usr/lib/R/library")
hist.scott(v)
v[i]<-rskellam(10,1,1)
V[i]<-sum(A)
A<-rskellam(10,1,1)
V[i]<-sum(A)
A<-rskellam(10,1,1)
v[i]<-sum(A)
for(i in 1:B){
A<-rskellam(10,1,1)
v[i]<-sum(A)
}
hist.scott(v)
plot(dskellam(10,1,1))
plot(dskellam(1,1,1))
hist.scott(v)
plot(1:B, dskellam(1:B,1,2))
plot(1:B, dskellam(1:B,1,1))
plot(1:B, dskellam(1:B,1,13))
plot(1:B, dnorm(1:B,1,13))
plot(1:B, dnorm(1:B,1,13))
plot(-B:B, dnorm(1:B,1,13))
plot(-B:B, dnorm(-B:B,1,13))
B=10
plot(-B:B, dnorm(-B:B,1,13))
B=100
plot(-B:B, dnorm(-B:B,1,13))
plot(-B:B, dskellam(-B:B,1,13))
plot(-B:B, dskellam(-B:B,1,1))
plot(-B:B, dskellam(-B:B,1,2))
plot(-B:B, dskellam(-B:B,1,123))
B=1000
plot(-B:B, dskellam(-B:B,1,123))
help("dnorm")
plot(-B:B, rnorm(-B:B,1,123))
plot(-B:B, rnorm(-B:B,1,123))
plot(-B:B, rnorm(10,1,123))
plot(-B:B, rnorm(-B:B,1,123))
A<-rnorm(10,1,1)
v[i]<-sum(A)
for(i in 1:B){
A<-rnorm(10,1,1)
v[i]<-sum(A)
}
hist.scott(v)
plot(1:B, v)
plot(v,type = "n")
plot(v,type = "l")
plot(v,type = "a")
plot(v,type = "b")
plot(v,type = "c")
plot(v,type = "f")
plot(v,type = "d")
plot(v,type = "e")
plot(v,type = "g")
plot(v,type = "h")
plot(v,type = "j")
plot(v,type = "s")
hist.scott(v)
B=10000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(10,1,1)
v[i]<-sum(A)
}
hist.scott(v)
B=100000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(10,1,1)
v[i]<-sum(A)
}
hist.scott(v)
B=100000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(10,1,1)
v[i]<-sum(A)/10
}
hist.scott(v)
A<-rnorm(10,1,4)
v[i]<-sum(A)/10
for(i in 1:B){
A<-rnorm(10,1,4)
v[i]<-sum(A)/10
}
hist.scott(v)
B=100000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(10,1,4)
v[i]<-sum(A)/10
}
hist.scott(v)
A<-rnorm(10,0,4)
v[i]<-sum(A)/10
for(i in 1:B){
A<-rnorm(10,0,4)
v[i]<-sum(A)/10
}
hist.scott(v)
B=100000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(10,0,4)
v[i]<-sum(A)/10
}
hist.scott(v)
B=100000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(100,0,4)
v[i]<-sum(A)/100
}
hist.scott(v)
plot(v,type = "s")
B=100000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(100,0,4)
v[i]<-sum(A)/100
}
hist.scott(v)
A<-rnorm(1000,0,4)
v[i]<-sum(A)/100
for(i in 1:B){
A<-rnorm(1000,0,4)
v[i]<-sum(A)/100
}
n<-100000
mu_stima<-rep(0,B)
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
hist.scott(x,xlim = c(4.5,5.5))
abline(v=5,col=2)
library(MASS, lib.loc = "/usr/lib/R/library")
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
hist.scott(x,xlim = c(4.5,5.5))
abline(v=5,col=2)
B=100000
mu<-5
sigma<-1
n<-100000
mu_stima<-rep(0,B)
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
hist.scott(x,xlim = c(4.5,5.5))
abline(v=5,col=2)
mu<-5
sigma<-1
n<-10000
mu_stima<-rep(0,B)
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
n<-1000
mu_stima<-rep(0,B)
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
B=10000
hist.scott(x,xlim = c(4.5,5.5))
abline(v=5,col=2)
x <- [1,2,3,4,5,6,7,8,9,10]
x <- "1,2,3,4,5,6,7,8,9,10"
x <- c(1,2,3,4,5,6,7,8,9,10)
mean(x>3)
y <- c(4,5,6,7,8,9,10)
mean(y)
mean(x>9)
mean(10)
x <- c(1,2,3,4,5,6,7,8,9,10)
mean(x>9)
mean(10)
x <- c(1,2,3,4,5,6,7,8,9,22)
mean(x>9)
mean(10)
x <- c(1,2,3,4,5,6,7,8,9,22)
mean(x>9)
mean(22)
p_norm=2-2pnorm(z,0,1)
n <- 10
mu <- 2
sigma <- 5
x <- mean(rnorm(n,3,sigma))
#test normalizzato mu=2 vs mu!=2
z=(x-2)/(sigma/sqrt(n))
p_norm=2-2*pnorm(z,0,1)
#test non normalizzato
p=2-2*pnorm(x,mu,sigma/sqrt(n))
p
p_norm
library(MASS, lib.loc = "/usr/lib/R/library")
library(MASS, lib.loc = "/usr/lib/R/library")
sqrt(1.02)
help(pnorm)
help(subset)
View(d)
d<-subset(iris,select = Petal.lenght)
d<-subset(iris,select = Petal.Length)
d<-subset(iris,select = Petal.Length, select = Petal.width)
d<-subset(iris,select = Petal.Length,select =  Petal.Width)
d<-subset(iris,select = c(Petal.Length,  Petal.Width))
View(d)
d<-subset(iris,select = c(Petal.Length,  Petal.Width, Species))
View(d)
help(facto)
help(factor)
for (i in d$Species){
if(i == "virginica" | i == "setosa"){
i <- virs
}
}
for (i in d$Species){
if(i == "virginica" | i == "setosa"){
i <- "virs"
}
}
View(d)
for (i in d){
if(i == "virginica" | i == "setosa"){
i <- "virs"
}
}
for (i in d$Species){
if(i == "virginica"){
i <- "virs"
}
}
View(d)
for (i in d$Species){
i
if(i == "virginica"){
i <- "virs"
}
}
i
d$Species
i<-d$Species[2]
i
library(dplyr)
d$Species <- recode_factor(d$Species, virginica = "virs", setosa = "virs", versicolor = "veriscolor")
View(d)
d$Species
plot(d$Petal.Length,d$Petal.Width, col = d$Species)
help("plot")
plot(d$Petal.Length,d$Petal.Width,pch=20,  col = d$Species)
plot(d$Petal.Length,d$Petal.Width,pch=15,  col = d$Species)
install.packages("e1071")
library(e1071)
gc()
library(e1071)
a <- svm(Species ~., d)
plot(a,d)
a <- svm(Species ~., d)
library(dplyr)
d<-subset(iris,select = c(Petal.Length,  Petal.Width, Species))
d$Species <- recode_factor(d$Species, virginica = "virs", setosa = "virs", versicolor = "veriscolor")
d$Species
library(e1071)
a <- svm(Species ~. , d)
plot(a,d)
rm(list(mu,n,nsim,Q1,Q3))
rm(c(mu,n,nsim,Q1,Q3))
rm(mu
)
rm(n)
rm(nsim)
rm(Q1)
rm(Q3)
rm(rho)
setwd("~/Documents/Repository/Francesc0rtu/hpc_assignment1/es1/ring/Ring")
library(readr)
results_sum <- read_csv("results_sum.csv")
View(results_sum)
library(ggplot2)
library(gridExtra)
setwd("~/Desktop/Francesc0rtu/hpc_assignment1/es1/ring/Ring")
result <- data.frame(results_sum)
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_line(data = result, aes(x = n_procs, y=MEAN.B, color = "mean"))
plot_result_B
library(readr)
RESULTS <- read_csv("RESULTS.csv")
View(RESULTS)
RESULT <- data.frame(RESULT)
RESULT <- data.frame(RESULTS)
plot_RESULT_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_line(data = RESULT, aes(x = n_procs, y=MEAN.B, color = "mean"))
plot_RESULT_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_line(data = result, aes(x = n_procs, y=MEAN.B, color = "mean"))+
geom_line(data = RESULT, aes(x = n_procs, y=MEAN.B, color = "mean"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_line(data = result, aes(x = n_procs, y=MEAN.B, color = "mean"))+
geom_line(data = RESULT, aes(x = n_procs, y=MEAN.B, color = "m"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = n_procs, y=MEAN.B, color = "mean"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs), y=MEAN.B, color = "mean"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MEAN.B, color = "mean"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MEAN.B, color = "mean"))+
geom_smooth(data = RESULT, aes(x = as.factor(n_procs), grup= "1" y=MEAN.B, color = "mean"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MEAN.B, color = "mean"))+
geom_smooth(data = RESULT, aes(x = as.factor(n_procs), grup= "1", y=MEAN.B, color = "mean"))
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MEAN.B, color = "mean"))+
geom_smooth(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MEAN.B, color = "mean"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MEAN.B, color = "mean"))+
geom_smooth(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MEAN.B, color = "MEAN"))
plot_result_B
result <- data.frame(results_sum)
library(readr)
results_sum <- read_csv("results_sum.csv")
View(results_sum)
result <- data.frame(results_sum)
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MIN.NB, color = "result"))+
geom_smooth(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MIN.NB, color = "RESULT"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MIN.B, color = "result"))+
geom_smooth(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MIN.B, color = "RESULT"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_line(data = result, aes(x = as.factor(n_procs),group="1", y=MIN.B, color = "result"))+
geom_line(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MIN.B, color = "RESULT"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_line(data = result, aes(x = as.factor(n_procs),group="1", y=MIN.NB, color = "result"))+
geom_line(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MIN.NB, color = "RESULT"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_line(data = result, aes(x = as.factor(n_procs),group="1", y=MEAN.B, color = "result"))+
geom_line(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MEAN.B, color = "RESULT"))+
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_line(data = result, aes(x = as.factor(n_procs),group="1", y=MEAN.B, color = "result"))+
geom_line(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MEAN.B, color = "RESULT"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MEAN.B, color = "result"))+
geom_line(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MEAN.B, color = "RESULT"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=SUM.B, color = "result"))+
geom_line(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=SUM.B, color = "RESULT"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MIN.B, color = "result"))+
geom_line(data = RESULT, aes(x = as.factor(n_procs), group= "1", y=MIN.B, color = "RESULT"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = result, aes(x = as.factor(n_procs),group="1", y=MIN.B, color = "result"))
plot_result_B
plot_result_B <- ggplot()+
#geom_line(data = result, aes(x = n_procs, y=SUM.B, color = "sum"))+
geom_smooth(data = RESULT, aes(x = as.factor(n_procs),group="1", y=MIN.B, color = "result"))
plot_result_B
