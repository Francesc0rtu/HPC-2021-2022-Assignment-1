for(i in 1:B){
A<-rnorm(10,1,4)
v[i]<-sum(A)/10
}
hist.scott(v)
A<-rnorm(10,0,4)
v[i]<-sum(A)/10
for(i in 1:B){
A<-rnorm(10,0,4)
v[i]<-sum(A)/10
}
hist.scott(v)
B=100000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(10,0,4)
v[i]<-sum(A)/10
}
hist.scott(v)
B=100000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(100,0,4)
v[i]<-sum(A)/100
}
hist.scott(v)
plot(v,type = "s")
B=100000
v<-rep(1,B)
for(i in 1:B){
A<-rnorm(100,0,4)
v[i]<-sum(A)/100
}
hist.scott(v)
A<-rnorm(1000,0,4)
v[i]<-sum(A)/100
for(i in 1:B){
A<-rnorm(1000,0,4)
v[i]<-sum(A)/100
}
n<-100000
mu_stima<-rep(0,B)
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
hist.scott(x,xlim = c(4.5,5.5))
abline(v=5,col=2)
library(MASS, lib.loc = "/usr/lib/R/library")
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
hist.scott(x,xlim = c(4.5,5.5))
abline(v=5,col=2)
B=100000
mu<-5
sigma<-1
n<-100000
mu_stima<-rep(0,B)
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
hist.scott(x,xlim = c(4.5,5.5))
abline(v=5,col=2)
mu<-5
sigma<-1
n<-10000
mu_stima<-rep(0,B)
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
n<-1000
mu_stima<-rep(0,B)
for(i in 1:B){
a<-rnorm(n,mu,sigma)
x[i] <- sum(a[2:n-1])/(n-2)
}
B=10000
hist.scott(x,xlim = c(4.5,5.5))
abline(v=5,col=2)
x <- [1,2,3,4,5,6,7,8,9,10]
x <- "1,2,3,4,5,6,7,8,9,10"
x <- c(1,2,3,4,5,6,7,8,9,10)
mean(x>3)
y <- c(4,5,6,7,8,9,10)
mean(y)
mean(x>9)
mean(10)
x <- c(1,2,3,4,5,6,7,8,9,10)
mean(x>9)
mean(10)
x <- c(1,2,3,4,5,6,7,8,9,22)
mean(x>9)
mean(10)
x <- c(1,2,3,4,5,6,7,8,9,22)
mean(x>9)
mean(22)
p_norm=2-2pnorm(z,0,1)
n <- 10
mu <- 2
sigma <- 5
x <- mean(rnorm(n,3,sigma))
#test normalizzato mu=2 vs mu!=2
z=(x-2)/(sigma/sqrt(n))
p_norm=2-2*pnorm(z,0,1)
#test non normalizzato
p=2-2*pnorm(x,mu,sigma/sqrt(n))
p
p_norm
library(MASS, lib.loc = "/usr/lib/R/library")
library(MASS, lib.loc = "/usr/lib/R/library")
sqrt(1.02)
help(pnorm)
help(subset)
View(d)
d<-subset(iris,select = Petal.lenght)
d<-subset(iris,select = Petal.Length)
d<-subset(iris,select = Petal.Length, select = Petal.width)
d<-subset(iris,select = Petal.Length,select =  Petal.Width)
d<-subset(iris,select = c(Petal.Length,  Petal.Width))
View(d)
d<-subset(iris,select = c(Petal.Length,  Petal.Width, Species))
View(d)
help(facto)
help(factor)
for (i in d$Species){
if(i == "virginica" | i == "setosa"){
i <- virs
}
}
for (i in d$Species){
if(i == "virginica" | i == "setosa"){
i <- "virs"
}
}
View(d)
for (i in d){
if(i == "virginica" | i == "setosa"){
i <- "virs"
}
}
for (i in d$Species){
if(i == "virginica"){
i <- "virs"
}
}
View(d)
for (i in d$Species){
i
if(i == "virginica"){
i <- "virs"
}
}
i
d$Species
i<-d$Species[2]
i
library(dplyr)
d$Species <- recode_factor(d$Species, virginica = "virs", setosa = "virs", versicolor = "veriscolor")
View(d)
d$Species
plot(d$Petal.Length,d$Petal.Width, col = d$Species)
help("plot")
plot(d$Petal.Length,d$Petal.Width,pch=20,  col = d$Species)
plot(d$Petal.Length,d$Petal.Width,pch=15,  col = d$Species)
install.packages("e1071")
library(e1071)
gc()
library(e1071)
a <- svm(Species ~., d)
plot(a,d)
a <- svm(Species ~., d)
library(dplyr)
d<-subset(iris,select = c(Petal.Length,  Petal.Width, Species))
d$Species <- recode_factor(d$Species, virginica = "virs", setosa = "virs", versicolor = "veriscolor")
d$Species
library(e1071)
a <- svm(Species ~. , d)
plot(a,d)
rm(list(mu,n,nsim,Q1,Q3))
rm(c(mu,n,nsim,Q1,Q3))
rm(mu
)
rm(n)
rm(nsim)
rm(Q1)
rm(Q3)
rm(rho)
help(mutate)
search(mutate)
library("dyplr")
library("dplyr")
help(mutate)
library(rpart)
model <- rpart(iris$Species ~., cp=0)
model <- rpart(Species ~., iris,  cp=0)
model
summary(model)
plot(model)
text(model)
plot(model)
text(model)
model$cptable
help(rstat)
help(rptat)
help(rpart)
plotcp(model)
help(invlogit)
library(arm)
install.packages(arm)
install.packages("arm")
# read csv assignment 1
library(ggplot2)
library(RColorBrewer)
library(patchwork)
library(cowplot)
setwd("/home/francesco/Documents/Repository/Francesc0rtu/hpc_assignment1/es2/IntelMPI/")
col_legend <-brewer.pal(n=8, name="Dark2")
file<-bysocket_ucx
df<-data.frame(file)
plot_times()
##############
plot_times <- function(file) {
df1<- data.frame(read.csv(file))
df1$X <- NULL
df<-df1[1:24,]
x <- df$X.bytes
#model_linear<-lm(t.usec.[1:24,] ~ X.bytes[1:24,], df)
model_poly <- loess(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="experimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="experimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)+
#scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
#if(!"t.usec.comp." %in% colnames(df)){
df1$t.usec.comp.[1:24] <- round(loess(t.usec. ~ X.bytes, df1[1:24,])$fitted, 4)
write.csv(df1[1:24,], file)
#}
return(times)
}
plot_bandwidth <- function(file) {
df1 <- data.frame(read.csv(file))
df1$X <- NULL
df<-df1[1:24,]
x <- df$X.bytes
model_linear<-lm(Mbytes.sec ~ X.bytes, df)
model_poly <- loess(Mbytes.sec ~ X.bytes, df, degree = 1)
model_time <- loess(t.usec. ~ X.bytes, df)
#bandwidth
bandwidth <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="experimental")) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="experimental"))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), df$X.bytes/loess(t.usec. ~X.bytes,df)$fitted, color="fit model", group=1))+
geom_line(aes(as.factor(x), df$X.bytes/model_time$fitted, color="fit model", group=1))+
labs(x = "Message size (bytes)", y = "MB/s") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)+
#scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
#if(!"Mbytes.sec.comp." %in% colnames(df)){
df1$Mbytes.sec.comp.[1:24] <- round(df1$X.bytes[1:24]/loess(t.usec. ~ X.bytes, df1[1:24,])$fitted, 4)
write.csv(df1, file)
# }
return(bandwidth)
}
plot_nshm <- function(core, socket, node, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times
ggsave(paste0( "time_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
node_badnwidth <- plot_bandwidth(node)
core_bandwidth + socket_bandwidth + node_badnwidth
ggsave(paste0( "bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
plot_shm <- function(core, socket, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
core_times + socket_times
ggsave(paste0( "time_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
core_bandwidth + socket_bandwidth
ggsave(paste0( "bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
plot_bandwidth <- function(file) {
df1 <- data.frame(read.csv(file))
df1$X <- NULL
df<-df1[1:24,]
x <- df$X.bytes
model_linear<-lm(Mbytes.sec ~ X.bytes, df)
model_poly <- lm(Mbytes.sec ~ X.bytes, df, degree = 1)
model_time <- lm(t.usec. ~ X.bytes, df)
#bandwidth
bandwidth <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="experimental")) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="experimental"))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), df$X.bytes/loess(t.usec. ~X.bytes,df)$fitted, color="fit model", group=1))+
geom_line(aes(as.factor(x), df$X.bytes/model_time$fitted, color="fit model", group=1))+
labs(x = "Message size (bytes)", y = "MB/s") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)+
#scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
#if(!"Mbytes.sec.comp." %in% colnames(df)){
df1$Mbytes.sec.comp.[1:24] <- round(df1$X.bytes[1:24]/loess(t.usec. ~ X.bytes, df1[1:24,])$fitted, 4)
write.csv(df1, file)
# }
return(bandwidth)
}
##############
plot_times <- function(file) {
df1<- data.frame(read.csv(file))
df1$X <- NULL
df<-df1[1:24,]
x <- df$X.bytes
#model_linear<-lm(t.usec.[1:24,] ~ X.bytes[1:24,], df)
model_poly <- lm(t.usec. ~ X.bytes, df)
times <- ggplot() +
# sperimental
geom_point( aes(x = as.factor(x) , y = df$t.usec., color="experimental", group = 1))  +
geom_line( aes(x = as.factor(x) , y = df$t.usec., color="experimental", group = 1)) +
# modello 1
geom_line( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
geom_point( aes(x = as.factor(x), y = min(df$t.usec.) + df$X.bytes/max(df$Mbytes.sec), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), model_poly$fitted, color="fit model", group=1))+
geom_line(aes(as.factor(x), model_poly$fitted, color="fit model", group=1))+
#fitted lm
#geom_point(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
#geom_line(aes(as.factor(x), model_linear$coefficients[1]+model_linear$coefficients[2]*x, color="fit linear model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)+
#scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
#if(!"t.usec.comp." %in% colnames(df)){
df1$t.usec.comp.[1:24] <- round(loess(t.usec. ~ X.bytes, df1[1:24,])$fitted, 4)
write.csv(df1[1:24,], file)
#}
return(times)
}
plot_nshm <- function(core, socket, node, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times
#ggsave(paste0( "time_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
node_badnwidth <- plot_bandwidth(node)
core_bandwidth + socket_bandwidth + node_badnwidth
ggsave(paste0( "bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
plot_shm <- function(core, socket, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
core_times + socket_times
ggsave(paste0( "time_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
core_bandwidth + socket_bandwidth
ggsave(paste0( "bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
#openmpi - cpu
##############
setwd("/home/francesco/Documents/Repository/Francesc0rtu/hpc_assignment1/es2/openMPI/CSV")
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv", "ucx_OPMPI")
#openmpi - cpu
##############
setwd("/home/francesco/Documents/Repository/Francesc0rtu/hpc_assignment1/es2/openMPI/CSV")
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv", "ucx_OPMPI")
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv", "ucx_OPMPI")
setwd("~/Repository/Francesc0rtu/hpc_assignment1/es2/openMPI/CSV")
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv", "ucx_OPMPI")
core_times + socket_times + node_times
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv", "ucx_OPMPI")
plot_nshm <- function(core, socket, node, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times
#ggsave(paste0( "time_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
node_badnwidth <- plot_bandwidth(node)
core_bandwidth + socket_bandwidth + node_badnwidth
ggsave(paste0( "bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
plot_bandwidth <- function(file) {
df1 <- data.frame(read.csv(file))
df1$X <- NULL
df<-df1[1:24,]
x <- df$X.bytes
model_linear<-lm(Mbytes.sec ~ X.bytes, df)
model_poly <- loess(Mbytes.sec ~ X.bytes, df, degree = 1)
model_time <- loess(t.usec. ~ X.bytes, df)
#bandwidth
bandwidth <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="experimental")) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="experimental"))  +
geom_smooth(data = df, aes(x=as.factor(x), y= Mbytes.sec, group= 2 , color = "lin"), method = "lm")+
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
# fitted poly
geom_point(aes(as.factor(x), df$X.bytes/loess(t.usec. ~X.bytes,df)$fitted, color="fit model", group=1))+
geom_line(aes(as.factor(x), df$X.bytes/model_time$fitted, color="fit model", group=1))+
labs(x = "Message size (bytes)", y = "MB/s") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)+
#scale_colour_manual(values = c("sperimental" = "#2bacbd", "comm. model" = "#cf5e25", "fit model" = "#297504")) +
labs(title = gsub('_', ' ', gsub('.{4}$', '', file)))
#if(!"Mbytes.sec.comp." %in% colnames(df)){
df1$Mbytes.sec.comp.[1:24] <- round(df1$X.bytes[1:24]/loess(t.usec. ~ X.bytes, df1[1:24,])$fitted, 4)
write.csv(df1, file)
# }
return(bandwidth)
}
plot_nshm <- function(core, socket, node, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times
#ggsave(paste0( "time_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
node_badnwidth <- plot_bandwidth(node)
core_bandwidth + socket_bandwidth + node_badnwidth
ggsave(paste0( "bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
plot_shm <- function(core, socket, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
core_times + socket_times
ggsave(paste0( "time_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
core_bandwidth + socket_bandwidth
ggsave(paste0( "bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
#openmpi - cpu
##############
setwd("/home/francesco/Documents/Repository/Francesc0rtu/hpc_assignment1/es2/openMPI/CSV")
#ucx
plot_nshm("bycore_ucx.csv", "bysocket_ucx.csv", "bynode_ucx.csv", "ucx_OPMPI")
plot_nshm <- function(core, socket, node, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times
#ggsave(paste0( "time_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
node_badnwidth <- plot_bandwidth(node)
core_bandwidth + socket_bandwidth + node_badnwidth
# ggsave(paste0( "bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
file <- "bysocket_ucx.csv"
df1 <- data.frame(read.csv(file))
x <- df$X.bytes
df
file <- "bysocket_ucx.csv"
df1 <- data.frame(read.csv(file))
df1
plot <- ggplot(data = df1) + geom_smooth(aes(x=X.bytes, y=Mbytes.sec))
plot
plot <- ggplot(data = df1) + geom_smooth(aes(x=X.bytes, y=Mbytes.sec), method = "lm")
plot
plot <- ggplot(data = df1) + geom_smooth(aes(x=X.bytes, y=Mbytes.sec), method = "lm")+geom_line(aes(x=X.bytes, y=Mbytes.sec))
plot
plot <- ggplot(data = df1[1:24,]) + geom_smooth(aes(x=X.bytes, y=Mbytes.sec), method = "lm")+geom_line(aes(x=X.bytes, y=Mbytes.sec))
plot
